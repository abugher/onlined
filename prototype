#!/bin/bash

# Set one wireless interface to try to use.  For every definition in
# /etc/network/interfaces.d/*, if the name of the spec is the name of a wifi
# network in range, try:  ifup "${wifi_interface}"="${spec}"
#wifi_interface=wlan0
wifi_interface=wlan2
sniff_secs=10


function main {
  check_online_passive
}


function dec_to_bin {
  printf "%08d\n" "$(
    bc <<< "ibase=10; obase=2; ${1}"
  )"
}


function bin_to_dec {
  echo "$((2#$1))"
}


function get_active_interface {
  ip route | awk '/default/ {print $5}' | grep .
}


function get_address_and_mask {
    ip addr show dev "${1}" \
    | awk '/^    inet / {print $2}' \
    | sed 's/\// /' \
    | awk '{print $1" "$2}'
}


function get_range {
  address_dec_string="${1}"
  mask_dec_string="${2}"

  read -a address_octets <<< "$(sed 's/\./ /g' <<< "${address_dec_string}")"
  address_bin_string=
  for octet_dec_string in "${address_octets[@]}"; do
    octet_bin_string="$(dec_to_bin "${octet_dec_string}")"
    address_bin_string+="${octet_bin_string}"
  done

  unset address_bin_array
  read -a address_bin_array <<< "$(echo $(grep -o . <<< "${address_bin_string}"))"
  unset network_bin_array
  for i in {0..31}; do
    network_bin_array[i]=0
  done
  for ((i=0; i<mask_dec_string; i++)); do
    network_bin_array[i]="${address_bin_array[i]}"
  done

  unset range_bottom_bin_array
  for ((i=0; i<31; i++)); do
    range_bottom_bin_array[i]="${network_bin_array[i]}"
  done
  range_bottom_bin_array[31]=1
  unset range_top_bin_array
  for ((i=0; i<31; i++)); do
    range_top_bin_array[i]="${network_bin_array[i]}"
  done
  for ((i=mask_dec_string; i<31; i++)); do
    range_top_bin_array[i]=1
  done
  range_top_bin_array[31]=0

  range_bottom_dec_string=
  for ((i=0; i<25; i+=8)); do
    octet_bin_string=
    for bit in "${range_bottom_bin_array[@]:i:8}"; do
      octet_bin_string+=$bit
    done
    octet_dec_string="$(bin_to_dec "${octet_bin_string}")"
    range_bottom_dec_string+="${octet_dec_string}"
    range_bottom_dec_string+='.'
  done
  range_bottom_dec_string="$(sed 's/\.$//' <<< "${range_bottom_dec_string}")"

  range_top_dec_string=
  for ((i=0; i<25; i+=8)); do
    octet_bin_string=
    for bit in "${range_top_bin_array[@]:i:8}"; do
      octet_bin_string+=$bit
    done
    octet_dec_string="$(bin_to_dec "${octet_bin_string}")"
    range_top_dec_string+="${octet_dec_string}"
    range_top_dec_string+='.'
  done
  range_top_dec_string="$(sed 's/\.$//' <<< "${range_top_dec_string}")"

  echo "${range_bottom_dec_string} ${range_top_dec_string}"
}


function  address_dec_to_bin {
  address="${1}"
  read -a octets_dec_string <<< $(awk -F '[ .]' '{print $1" "$2" "$3" "$4}' <<< "${address}")
  octets=()
  read -a octets_bin_string <<< $(
    echo $(
      for octet_dec_string in "${octets_dec_string[@]}"; do
        dec_to_bin "${octet_dec_string}"
      done
    )
  )
  address_bin_string=
  for octet_bin_string in "${octets_bin_string[@]}"; do
    address_bin_string+="${octet_bin_string}"
  done
  echo "${address_bin_string}"
}


function check_online_passive {
  active_interface="$(get_active_interface)" \
  || return 1
  read -a range_bottom_dec_string range_top_dec_string <<< $(get_range $(get_address_and_mask "${active_interface}"))
  range_bottom_bin_string="$(address_dec_to_bin "${range_bottom_dec_string}")"
  range_top_bin_string="$(address_dec_to_bin "${range_top_dec_string}")"

  # timeout makes sub-scope.  Make it return false on success, flip that value and return from the function.  This is stupid.
  timeout "${sniff_secs}" tcpdump -i "${active_interface}" -n 2>~/tmp/errors.txt \
  | grep -E '[^ ]+[[:space:]]+IP' \
  | while read time IP src_address_dot_port arrow dst_address_dot_port garbage; do 

    src_address_dec_string="$(sed 's/\.[0-9]*$//' <<< "${src_address_dot_port}")"
    dst_address_dec_string="$(sed -E 's/\.[0-9]*:$//' <<< "${dst_address_dot_port}")"
    src_address_bin_string="$(address_dec_to_bin "${src_address_dec_string}")"
    dst_address_bin_string="$(address_dec_to_bin "${dst_address_dec_string}")"

    if test "$((2#$src_address_bin_string))" -lt "$((2#$range_bottom_bin_string))"; then
      return 1
    fi
    if test "$((2#$src_address_bin_string))" -gt "$((2#$range_top_bin_string))"; then
      return 1
    fi
  done
  if test $? -eq 0; then
    return 1
  else
    return 0
  fi
}


main
