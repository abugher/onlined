#!/bin/bash

#wifi_interface=wlan0
wifi_interface=wlan2
sniff_secs=10
sleep_secs_online=60
sleep_secs_retry=5
sleep_secs_next=1
skip_interfaces=( lo )
self_name="$(sed 's/^.*\///g' <<< "${0}")"
calm_count_max=5

ret_pass=0
ret_warn=1
ret_fail=2


function main {
  timestamp

  while true; do
    if check_online; then
      timestamp
      output "Status:  online."
    else
      output "Status:  offline."
      while true; do 
        timestamp
        if refresh; then break; fi
        sleep "${sleep_secs_retry}"
      done
    fi
    sleep "${sleep_secs_online}"
  done
}


function timestamp {
  output "$(date --iso-8601=sec)"
}


function output {
  printf "%s:  %s\n" "${self_name}" "${1}"
}


function debug {
  if test 'yes' == "${DEBUG:+yes}"; then
    printf "%s:  DEBUG:  %s\n" "${self_name}" "${1}"
  fi
}


function error {
  printf "%s:  ERROR:  %s\n" "${self_name}" "${1}" >&2
}


function warn {
  printf "%s:  WARNING :  %s\n" "${self_name}" "${1}" >&2
}


function try_spec {
  target="${1}"
  sleep "${sleep_secs_next}"
  output "Trying network spec:  ${target}"
  if ifup "${target}" 2>/dev/null && check_online; then
    output "Successfully brought up network spec:  ${target}"
    return "${ret_pass}"
  fi
  output "Failed to bring up network spec:  ${target}"
  if ! ifdown "${target}"; then
    error "Failed to bring down network spec:  ${target}"
    return "${ret_fail}"
  fi
  return "${ret_warn}"
}


function refresh {
  output "Refreshing connection."
  read -a interfaces <<< $(get_interfaces)
  read -a spec_names <<< $(get_spec_names)

  if ! ifdown "${interfaces[@]}"; then
    error "Failed to bring down interfaces:  ( ${interfaces[@]} )"
    return "${ret_fail}"
  fi

  output "Trying each specified interface."
  for spec_name in "${spec_names[@]}"; do
    for interface in "${interfaces[@]}"; do
      if test "${spec_name}" == "${interface}"; then
        try_spec "${spec_name}"
        ret="${?}"
        case "${ret}" in
          "${ret_warn}")        continue        ;;
          *)                    return "${ret}" ;;
        esac
      fi
    done
  done
  output "Failed to bring up any specified interface."

  wifi_names=()
  while read wifi_name; do
    wifi_names+=( "${wifi_name}" )
  done < <(get_wifi_names)

  output "Trying specified wireless networks."
  for spec_name in "${spec_names[@]}"; do
    for wifi_name in "${wifi_names[@]}"; do
      if test "${spec_name}" == "${wifi_name}"; then
        try_spec "${wifi_interface}=${spec_name}"
        ret="${?}"
        case "${?}" in
          "${ret_warn}")        continue        ;;
          *)                    return "${ret}" ;;
        esac
      fi
    done
  done
  output "Failed to bring up any specified wireless network."

  output "Failed to refresh connection."
  return "${ret_fail}"
}


function check_online_passive {
  output "Checking online status:  Passive check."
  if ! active_interface="$(get_active_interface)"; then
    error "Failed to identify an active interface."
    return "${ret_fail}"
  fi
  debug "active_interface='${active_interface}'"

  if ! address_and_mask="$(get_address_and_mask "${active_interface}")"; then
    error "Failed to get address and mask."
    return "${ret_fail}"
  fi
  debug "address_and_mask='${address_and_mask}'"

  read range_bottom_dec_string range_top_dec_string <<< $(get_range "${address_and_mask}")
  ret="${?}"
  debug "range_bottom_dec_string='${range_bottom_dec_string}'"
  debug "range_top_dec_string='${range_top_dec_string}'"
  if ! test "${ret}" -eq 0; then
    error "Failed to identify address range of local subnet."
    return "${ret_fail}"
  fi

  range_bottom_bin_string="$(address_dec_to_bin "${range_bottom_dec_string}")"
  range_top_bin_string="$(address_dec_to_bin "${range_top_dec_string}")"
  debug "2#range_bottom_bin_string='$((2#$range_bottom_bin_string))'"
  debug "2#range_top_bin_string='$((2#$range_top_bin_string))'"

  output "Watching ${active_interface} for ${sniff_secs}s for inbound internet traffic."

  unset outbound_traffic
  while read time IP src_address_dot_port arrow dst_address_dot_port garbage; do 
    src_address_dec_string="$(sed -E 's/\.[0-9]*$//' <<< "${src_address_dot_port}")"
    dst_address_dec_string="$(sed -E 's/\.[0-9]*:$//' <<< "${dst_address_dot_port}")"
    debug "src_address_bin_string='${src_address_bin_string}'"
    debug "dst_address_bin_string='${dst_address_bin_string}'"
    src_address_bin_string="$(address_dec_to_bin "${src_address_dec_string}")"
    dst_address_bin_string="$(address_dec_to_bin "${dst_address_dec_string}")"
    debug "2#src_address_bin_string='$((2#$src_address_bin_string))'"
    debug "2#dst_address_bin_string='$((2#$dst_address_bin_string))'"

    if 
      test    "$((2#$src_address_bin_string))" -lt "$((2#$range_bottom_bin_string))" \
      || test "$((2#$src_address_bin_string))" -gt "$((2#$range_top_bin_string))"
    then
      output "Inbound traffic detected."
      return "${ret_pass}"
    elif
      test    "$((2#$dst_address_bin_string))" -lt "$((2#$range_bottom_bin_string))" \
      || test "$((2#$dst_address_bin_string))" -gt "$((2#$range_top_bin_string))"
    then
      let outbound_traffic=1
    fi
  done < <(
    timeout "${sniff_secs}" \
    tcpdump -i "${active_interface}" -n 2>/dev/null \
    | grep -E '[^ ]+[[:space:]]+IP' \
  )

  if test "${outbound_traffic}" -gt 0; then
    output "Unanswered outbound traffic detected."
    return "${ret_fail}"
  else
    output "No traffic detected."
    return "${ret_warn}"
  fi
}


function check_online_active {
  output "Checking online status:  Active check."
  if ping -c 1 -w 1 -W 1 8.8.8.8; then
    output "Checking online status:  Active check:  pass"
    return "${ret_pass}"
  else
    output "Checking online status:  Active check:  fail"
    return "${ret_fail}"
  fi
}


function check_online {
  output "Checking online status."

  calm_count=0
  while test "${calm_count}" -lt "${calm_count_max}"; do
    debug "calm_count='${calm_count}'; calm_count_max='${calm_count_max}'"
    check_online_passive 
    ret="${?}"
    debug "check_online_passive returned:  '${ret}'"
    case "${ret}" in
      "${ret_warn}") let calm_count++   ;;
      *) return "${ret}"                ;;
    esac
  done

  check_online_active
}


function dec_to_bin {
  printf "%08d\n" "$(
    bc <<< "ibase=10; obase=2; ${1}"
  )"
}


function bin_to_dec {
  echo "$((2#$1))"
}


function get_active_interface {
  if ! route_list="$(ip route)"; then
    error "Failed to list routes."
    return 1
  fi
  route_list="$(awk '/default/ {print $5}' <<< "${route_list}")"
  grep . <<< "${route_list}"
}


function get_interfaces {
  skip_interfaces_regex=
  for interface in "${skip_interfaces}"; do
    skip_interfaces_regex+="${interface}|"
  done
  skip_interfaces_regex="$(sed 's/|$//' <<< "${skip_interfaces_regex}")"
  if ! interface_list="$(ip link)"; then
    error "Failed to list interfaces."
    return 1
  fi
  interface_list="$(awk '/^[0-9]+: / {print $2}' <<< "${interface_list}")"
  interface_list="$(sed 's/:$//' <<< "${interface_list}")"
  interface_list="$(grep -Ev "^${skip_interfaces_regex}" <<< "${interface_list}")"

  # No quotes.
  echo ${interface_list}
}


function get_spec_names {
  if ! spec_list="$(cat /etc/network/interfaces{,.d/*})"; then
    error "Failed to read network specification list(s)."
    return 1
  fi
  spec_list="$(awk '/iface/ {print $2}' <<< "${spec_list}")"
  # No quotes.
  echo ${spec_list}
}


function get_wifi_names {
  if ! ip link set "${wifi_interface}" up; then
    warn "Failed to mark interface as up:  ${wifi_interface}"
  fi

  if ! wifi_list="$(iwlist "${wifi_interface}" scan)"; then
    error "Failed to scan for wifi names."
    return 1
  fi
  # Wifi names can have spaces; leave them on separate lines.
  awk -F '[:"]' '/^ *ESSID:/ {print $3}' <<< "${wifi_list}"
}


function get_address_and_mask {
    if ! address_and_mask="$(ip addr show dev "${1}")"; then
      error "Failed to query address and mask."
      return 1
    fi
    awk '/^    inet / {print $2}' <<< "${address_and_mask}" \
    | sed 's/\// /' \
    | awk '{print $1" "$2}'
}


function get_range {
  address_dec_string="${1}"
  mask_dec_string="${2}"

  read -a address_octets <<< "$(sed 's/\./ /g' <<< "${address_dec_string}")"
  address_bin_string=
  for octet_dec_string in "${address_octets[@]}"; do
    octet_bin_string="$(dec_to_bin "${octet_dec_string}")"
    address_bin_string+="${octet_bin_string}"
  done

  unset address_bin_array
  read -a address_bin_array <<< "$(echo $(grep -o . <<< "${address_bin_string}"))"
  unset network_bin_array
  for i in {0..31}; do
    network_bin_array[i]=0
  done
  for ((i=0; i<mask_dec_string; i++)); do
    network_bin_array[i]="${address_bin_array[i]}"
  done

  unset range_bottom_bin_array
  for ((i=0; i<31; i++)); do
    range_bottom_bin_array[i]="${network_bin_array[i]}"
  done
  range_bottom_bin_array[31]=1
  unset range_top_bin_array
  for ((i=0; i<31; i++)); do
    range_top_bin_array[i]="${network_bin_array[i]}"
  done
  for ((i=mask_dec_string; i<31; i++)); do
    range_top_bin_array[i]=1
  done
  range_top_bin_array[31]=0

  range_bottom_dec_string=
  for ((i=0; i<25; i+=8)); do
    octet_bin_string=
    for bit in "${range_bottom_bin_array[@]:i:8}"; do
      octet_bin_string+=$bit
    done
    octet_dec_string="$(bin_to_dec "${octet_bin_string}")"
    range_bottom_dec_string+="${octet_dec_string}"
    range_bottom_dec_string+='.'
  done
  range_bottom_dec_string="$(sed 's/\.$//' <<< "${range_bottom_dec_string}")"

  range_top_dec_string=
  for ((i=0; i<25; i+=8)); do
    octet_bin_string=
    for bit in "${range_top_bin_array[@]:i:8}"; do
      octet_bin_string+=$bit
    done
    octet_dec_string="$(bin_to_dec "${octet_bin_string}")"
    range_top_dec_string+="${octet_dec_string}"
    range_top_dec_string+='.'
  done
  range_top_dec_string="$(sed 's/\.$//' <<< "${range_top_dec_string}")"

  echo "${range_bottom_dec_string} ${range_top_dec_string}"
}


function  address_dec_to_bin {
  address="${1}"
  read -a octets_dec_string <<< $(awk -F '[ .]' '{print $1" "$2" "$3" "$4}' <<< "${address}")
  octets=()
  read -a octets_bin_string <<< $(
    echo $(
      for octet_dec_string in "${octets_dec_string[@]}"; do
        dec_to_bin "${octet_dec_string}"
      done
    )
  )
  address_bin_string=
  for octet_bin_string in "${octets_bin_string[@]}"; do
    address_bin_string+="${octet_bin_string}"
  done
  echo "${address_bin_string}"
}


main
