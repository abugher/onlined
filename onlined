#!/bin/bash

#wifi_interface=wlan0
wifi_interface=wlan2
sniff_secs=10
sleep_secs=60
skip_interfaces=( lo )
self_name="$(sed 's/^.*\///g' <<< "${0}")"
max_calm=5


function main {
  timestamp

  while true; do
    if check_online; then
      timestamp
      output "Status:  online."
    else
      while true; do 
        timestamp
        output "Status:  offline."
        if refresh; then break; fi
      done
    fi
    sleep "${sleep_secs}"
  done
}


function timestamp {
  output "$(date --iso-8601=sec)"
}


function output {
  printf "%s:  %s\n" "${self_name}" "${1}"
}


function error {
  printf "%s:  ERROR:  %s\n" "${self_name}" "${1}" >&2
}


function warn {
  printf "%s:  WARNING :  %s\n" "${self_name}" "${1}" >&2
}


function refresh {
  output "Refreshing."
  read -a interfaces <<< $(get_interfaces)
  read -a spec_names <<< $(get_spec_names)

  ifdown "${interfaces[@]}" || error "Failed to bring down interfaces:  ( ${interfaces[@]} )"

  for spec_name in "${spec_names[@]}"; do
    for interface in "${interfaces[@]}"; do
      if test "${spec_name}" == "${interface}"; then
        output "Trying interface:  ${interface}"
        if ifup "${interface}" && check_online; then
          output "Successfully brought up interface:  ${interface}"
          return 0
        else
          #warn "Failed to bring up interface:  ${interface}"
          ifdown "${interface}" || error "Failed to bring down interface:  ${wifi_interface}"
        fi
      fi
    done
  done
  #warn "Failed to bring up any interface by name."

  wifi_names=()
  while read wifi_name; do
    wifi_names+=( "${wifi_name}" )
  done <<< $(get_wifi_names)

  for spec_name in "${spec_names[@]}"; do
    for wifi_name in "${wifi_names[@]}"; do
      if test "${spec_name}" == "${wifi_name}"; then
        output "Trying wifi network:  ${wifi_name}"
        if ifup "${wifi_interface}=${spec_name}" && check_online; then
          output "Successfully joined wifi network:  ${wifi_name}"
          return 0
        else
          warn "Failed to join wifi network:  ${wifi_name}"
          ifdown "${wifi_interface}" || error "Failed to bring down interface:  ${wifi_interface}"
        fi
      fi
    done
  done

  error "Failed to get online."
  return 1
}


function check_online_passive {
  if ! active_interface="$(get_active_interface)"; then
    error "Failed to identify active interface."
    return 1
  fi

  if ! address_and_mask="$(get_address_and_mask "${active_interface}")"; then
    warn "Failed to get address and mask."
  fi

  if ! read -a range_bottom_dec_string range_top_dec_string <<< $(get_range ${address_and_mask}); then
    error "Failed to identify address range of local subnet."
    return 1
  fi

  range_bottom_bin_string="$(address_dec_to_bin "${range_bottom_dec_string}")"
  range_top_bin_string="$(address_dec_to_bin "${range_top_dec_string}")"

  output "Watching ${active_interface} for ${sniff_secs}s for inbound internet traffic."

  outbound_packets=0
  while read time IP src_address_dot_port arrow dst_address_dot_port garbage; do 
    src_address_dec_string="$(sed 's/\.[0-9]*$//' <<< "${src_address_dot_port}")"
    dst_address_dec_string="$(sed -E 's/\.[0-9]*:$//' <<< "${dst_address_dot_port}")"
    src_address_bin_string="$(address_dec_to_bin "${src_address_dec_string}")"
    dst_address_bin_string="$(address_dec_to_bin "${dst_address_dec_string}")"

    if 
      test    "$((2#$src_address_bin_string))" -lt "$((2#$range_bottom_bin_string))" \
      || test "$((2#$src_address_bin_string))" -gt "$((2#$range_top_bin_string))"
    then
      return 0
    elif
      test    "$((2#$dst_address_bin_string))" -lt "$((2#$range_bottom_bin_string))" \
      || test "$((2#$dst_address_bin_string))" -gt "$((2#$range_top_bin_string))"
    then
      let outbound_packets++
    fi
    
  done < <(
    timeout "${sniff_secs}" tcpdump -i "${active_interface}" -n \
    | grep -E '[^ ]+[[:space:]]+IP' \
  )

  if test $outbound_packets -gt 0; then
    return 1
  else
    return 2
  fi
}


function check_online_active {
  ping -c 1 -w 1 -W 1 8.8.8.8
}


function check_online {
  calm_count=0
  while test $calm_count -lt $max_calm; do
    check_online_passive 
    case "${?}" in
      0)
        return 0
        ;;
      1)
        return 1
        ;;
      2)
        let calm_count++
        ;;
    esac
  done
  check_online_active
}


function dec_to_bin {
  printf "%08d\n" "$(
    bc <<< "ibase=10; obase=2; ${1}"
  )"
}


function bin_to_dec {
  echo "$((2#$1))"
}


function get_active_interface {
  if ! route_list="$(ip route)"; then
    error "Failed to list routes."
    return 1
  fi
  route_list="$(awk '/default/ {print $5}' <<< "${route_list}")"
  grep . <<< "${route_list}"
}


function get_interfaces {
  skip_interfaces_regex=
  for interface in "${skip_interfaces}"; do
    skip_interfaces_regex+="${interface}|"
  done
  skip_interfaces_regex="$(sed 's/|$//' <<< "${skip_interfaces_regex}")"
  if ! interface_list="$(ip link)"; then
    error "Failed to list interfaces."
    return 1
  fi
  interface_list="$(awk '/^[0-9]+: / {print $2}' <<< "${interface_list}")"
  interface_list="$(sed 's/:$//' <<< "${interface_list}")"
  interface_list="$(grep -Ev "^${skip_interfaces_regex}" <<< "${interface_list}")"

  # No quotes.
  echo ${interface_list}
}


function get_spec_names {
  if ! spec_list="$(cat /etc/network/interfaces{,.d/*})"; then
    error "Failed to read network specification list(s)."
    return 1
  fi
  spec_list="$(awk '/iface/ {print $2}' <<< "${spec_list}")"
  # No quotes.
  echo ${spec_list}
}


function get_wifi_names {
  if ! ip link set "${wifi_interface}" up; then
    warn "Failed to mark interface as up:  ${wifi_interface}"
  fi

  if ! wifi_list="$(iwlist "${wifi_interface}" scan)"; then
    error "Failed to scan for wifi names."
    return 1
  fi
  # Wifi names can have spaces; leave them on separate lines.
  awk -F '[:"]' '/^ *ESSID:/ {print $3}' <<< "${wifi_list}"
}


function get_address_and_mask {
    if ! address_and_mask="$(ip addr show dev "${1}")"; then
      error "Failed to query address and mask."
      return 1
    fi
    awk '/^    inet / {print $2}' <<< "${address_and_mask}" \
    | sed 's/\// /' \
    | awk '{print $1" "$2}'
}


function get_range {
  address_dec_string="${1}"
  mask_dec_string="${2}"

  read -a address_octets <<< "$(sed 's/\./ /g' <<< "${address_dec_string}")"
  address_bin_string=
  for octet_dec_string in "${address_octets[@]}"; do
    octet_bin_string="$(dec_to_bin "${octet_dec_string}")"
    address_bin_string+="${octet_bin_string}"
  done

  unset address_bin_array
  read -a address_bin_array <<< "$(echo $(grep -o . <<< "${address_bin_string}"))"
  unset network_bin_array
  for i in {0..31}; do
    network_bin_array[i]=0
  done
  for ((i=0; i<mask_dec_string; i++)); do
    network_bin_array[i]="${address_bin_array[i]}"
  done

  unset range_bottom_bin_array
  for ((i=0; i<31; i++)); do
    range_bottom_bin_array[i]="${network_bin_array[i]}"
  done
  range_bottom_bin_array[31]=1
  unset range_top_bin_array
  for ((i=0; i<31; i++)); do
    range_top_bin_array[i]="${network_bin_array[i]}"
  done
  for ((i=mask_dec_string; i<31; i++)); do
    range_top_bin_array[i]=1
  done
  range_top_bin_array[31]=0

  range_bottom_dec_string=
  for ((i=0; i<25; i+=8)); do
    octet_bin_string=
    for bit in "${range_bottom_bin_array[@]:i:8}"; do
      octet_bin_string+=$bit
    done
    octet_dec_string="$(bin_to_dec "${octet_bin_string}")"
    range_bottom_dec_string+="${octet_dec_string}"
    range_bottom_dec_string+='.'
  done
  range_bottom_dec_string="$(sed 's/\.$//' <<< "${range_bottom_dec_string}")"

  range_top_dec_string=
  for ((i=0; i<25; i+=8)); do
    octet_bin_string=
    for bit in "${range_top_bin_array[@]:i:8}"; do
      octet_bin_string+=$bit
    done
    octet_dec_string="$(bin_to_dec "${octet_bin_string}")"
    range_top_dec_string+="${octet_dec_string}"
    range_top_dec_string+='.'
  done
  range_top_dec_string="$(sed 's/\.$//' <<< "${range_top_dec_string}")"

  echo "${range_bottom_dec_string} ${range_top_dec_string}"
}


function  address_dec_to_bin {
  address="${1}"
  read -a octets_dec_string <<< $(awk -F '[ .]' '{print $1" "$2" "$3" "$4}' <<< "${address}")
  octets=()
  read -a octets_bin_string <<< $(
    echo $(
      for octet_dec_string in "${octets_dec_string[@]}"; do
        dec_to_bin "${octet_dec_string}"
      done
    )
  )
  address_bin_string=
  for octet_bin_string in "${octets_bin_string[@]}"; do
    address_bin_string+="${octet_bin_string}"
  done
  echo "${address_bin_string}"
}


main
